<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, January 31, 2022, 7:06 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "skinner" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Skinner"
   author="Kelaire - fixed by Seekers"
   id="91afa688265806761d5c753b"
   language="Lua"
   purpose="Maybe it can skin?"
   date_written="2022-01-31 19:06:12"
   requires="5.07"
   version="1.2"
   save_state="y"
   >

<description trim="n">
<![CDATA[

]]>
</description>


</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>

  <trigger
   enabled="y"
   match="{kelskin}"
   regexp="n"
   script="startCapture"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="{/kelskin}"
   regexp="n"
   script="endCapture"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="n"
   group="skinnergroup"
   match="^(?<number>\([\s0-9]+\))?\s*?(?<junk>\s\([A-Z]\))?\s?(?<morejunk>.*)?[Tt]he.*corpse .*$"
   regexp="y"
   keep_evaluating="y"
   omit_from_output="y"
   sequence="100"
   script="addCorpse"
  >
  </trigger>
  
  <trigger
   enabled="n"
   group="skinnergroup"
   match=".*"
   regexp="y"
   keep_evaluating="y"
   omit_from_output="y"
   sequence="101"
  >
  </trigger>
  
   <trigger
   enabled="y"
   match="^You craft the .* further into: \((?<bloot>[A-Za-z]+)\)\s(?<item>.*)\.$"
   regexp="y"
   keep_evaluating="y"
   omit_from_output="n"
   sequence="100"
   script="addBloot"
  >
  </trigger>
  
   <trigger
   enabled="y"
   match="^If you want to keep this item, don't forget to 'preserve' it\.$"
   regexp="y"
   keep_evaluating="y"
   omit_from_output="n"
   sequence="100"
   script="skinningDone"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="{kelinv}"
   regexp="n"
   script="startInvCapture"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="{/kelinv}"
   regexp="n"
   script="endInvCapture"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="n"
   group="skinnerinv"
   match="^(?<junk>\([\s0-9][0-9]\))?\s+?(?<junk2>\([A-Z]\))?\s(?<typeofitem>(a solid helm|a pair of gloves|a set of sleeves|a pair of leggings|a pair of boots|a protective cloak)) skinned from .*$"
   regexp="y"
   keep_evaluating="y"
   omit_from_output="n"
   sequence="100"
   script=""
  >
  </trigger>

</triggers>

<!--  Aliases  -->

<aliases>
	<alias script="ShowHelp" match="^skinner help$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="changeType" match="^skinner type (?<type>boots|leggings|sleeves|cloak|gloves|helm)$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="autoPreserve" match="^skinner auto (?<type>yes|no|bloot)$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="autoDrop" match="^skinner drop (?<type>yes|no)$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="autoBag" match="^skinner bag (?<type>yes|no)$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="setBag" match="^skinner bag (?<type>[A-Za-z0-9]+)$" enabled="y" regexp="y" sequence="101" ignore_case="y"></alias>
	<alias script="lookSend" match="^skinner test$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="enableSkinner" match="^skinner enable$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="disableSkinner" match="^skinner disable$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="showStatus" match="^skinner status$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<!--alias script="checkItems" match="^skinner check" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias-->
	<alias regexp="y" match="^skinner rep(ort)? (?<channel>.*)$" enabled="y" script="reportData"></alias>
</aliases>


<script>

<![CDATA[

require "serialize"
require "wait"
require "commas"
require "gmcphelper"

skinnerColor = "khaki" --todo: add some ingame method of changing color.
skinnerWait = 3 -- todo: add handler for this too
skinnerSmote = true
skinnerPlayer = gmcp("char.base.name")
skinnerDropWait = 2

numcorpse = 0
local tag = "@D[@GSkinner Stats@D] :@w"

-- Default Enabled = On
if (GetVariable("ks_enabled") ~= nil) then
	enabled = GetVariable("ks_enabled")
else
	SetVariable("ks_enabled", "yes")
	enabled = "yes"
end

-- Default Preserve = "no"
if (GetVariable("ks_preserve") ~= nil) then
	preserve = GetVariable("ks_preserve")
else
	SetVariable("ks_preserve", "bloot")
	preserve = "bloot"
end

-- Default throwAway = "no"
if (GetVariable("ks_throwaway") ~= nil) then
	throwAway = GetVariable("ks_throwaway")
else
	SetVariable("ks_throwaway", "no")
	throwAway = "no"
end

-- Default autobagger = "no"
if (GetVariable("ks_autobag") ~= nil) then
	autobagger = GetVariable("ks_autobag")
else
	SetVariable("ks_autobag", "no")
	autobagger = "no"
end

-- Default autobagger = "no"
if (GetVariable("ks_bag") ~= nil) then
	thebag = GetVariable("ks_bag")
else
	SetVariable("ks_bag", "no")
	thebag = ""
end

-- Default Skin Type = "Cloak"
if (GetVariable("ks_skintype") ~= nil) then
--	skitype = GetVariable("ks_skintype")
	skintype = GetVariable("ks_skintype")
else
	SetVariable("ks_skintype", "cloak")
	skintype = "cloak"
end

-- Load the BLOOT info
local data = {}

if (GetVariable("ks_data") ~= nil) then
	luastmt = "obj = " .. GetVariable("ks_data")
	assert (loadstring (luastmt or "")) ()
	data = obj
end

-- On plugin install ...
function OnPluginInstall(msg, id, name, text)
	ColourNote(skinnerColor,"","[Skinner]: Plugin installed")
	ColourNote(skinnerColor,"","[Skinner]: Defaulted to " .. enabled)
	ColourNote(skinnerColor,"","[Skinner]: Defaulted to type of " .. skintype)
	ColourNote(skinnerColor,"","[Skinner]: Defaulted to auto-preserve " .. preserve)
	ColourNote(skinnerColor,"","[Skinner]: Defaulted to auto-drop " .. throwAway)
	ColourNote(skinnerColor,"","[Skinner]: Defaulted to auto-bag " .. autobagger)
	ColourNote(skinnerColor,"","[Skinner]: Defaulted to storage bag " .. thebag)
	
	if (GetVariable("ks_data") ~= nil) then
		-- load saved variables if they exist
		luastmt = "obj = " .. GetVariable("ks_data")
		assert (loadstring (luastmt or "")) ()
		data = obj
		if data.lastBonus == nil then --"Update" to fix a stat that didn't exist in a previous version
			if data.totalskins == nil then
				data.totalskins = 0
				data.lastBonus = 0
			else
				data.lastBonus = data.totalskins
			end
		end
	else
		resetData()
	end
end

function OnPluginSaveState()
	SetVariable("ks_data", serialize.save_simple(data)) --worky?
end

function OnPluginBroadcast(msg, id, name, text)
	if (id == '3e7dedbe37e44942dd46d264') then
		if (text == "char.status") then
			res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.status")				 
			luastmt = "gmcpdata = " .. gmcparg --- Convert the serialized string back into a lua table.
			assert (loadstring (luastmt or "")) ()																						

			if gmcpdata.state == "8" then
				inCombat = true
				numcorpse = 0
			else
				if inCombat then
					if enabled == "yes" then
						lookSend()					
					end
				end
				inCombat = false
			end
		end
	end
end

function lookSend(name, line, args)
	wait.make (function()
		SendNoEcho("echo {kelskin}")
		SendNoEcho("look")
		SendNoEcho("echo {/kelskin}") 
		wait.time(skinnerWait)
	end)
end

-- Start the capture of the config output
function startCapture(name, line, args)
	EnableTriggerGroup("skinnergroup", true)
	numcorpse=0
end

-- End the capture of the config output
function endCapture(name, line, args)
	EnableTriggerGroup("skinnergroup", false)
	skinMobs()
end

-- Start the capture of the inv output
function startInvCapture(name, line, args)
	EnableTriggerGroup("skinnerinv", true)
end

-- End the capture of the inv output
function endInvCapture(name, line, args)
	EnableTriggerGroup("skinnerinv", false)
end

-- Add corpses that you find so we can skin them
function addCorpse(name,line,args)
	if args.number == nil or args.number == "" then
		toadd = 1
	else 
		toadd = string.sub(args.number,2,3)
		toadd = string.gsub(toadd,"%s+","")
	end
	numcorpse = numcorpse + toadd
	--ColourNote(skinnerColor,"","toadd: " .. toadd .. "  |  numcorpse: " .. numcorpse)
end

-- Show the help!
function ShowHelp(name,line,args)
	ColourNote(skinnerColor,"","[Skinner]: Kelaire was too lazy to make a nicely formatted help for this...")
	ColourNote(skinnerColor,"","[Skinner]: Commands are as follows:")
	ColourNote(skinnerColor,"","[Skinner]: skinner enable/disable (to turn on and off)")
	ColourNote(skinnerColor,"","[Skinner]: skinner type boots|leggings|sleeves|cloak|gloves|helm")
	ColourNote(skinnerColor,"","[Skinner]: skinner auto yes/no (turns on/off auto preserve)")
	ColourNote(skinnerColor,"","[Skinner]: skinner drop yes/no (turns on/off auto drop of normal)")
	ColourNote(skinnerColor,"","[Skinner]: skinner bag yes/no (turns on/off auto bag of bloot)")
	ColourNote(skinnerColor,"","[Skinner]: skinner bag name/id (keyword or id of storage bag)")
	ColourNote(skinnerColor,"","[Skinner]: skinner status (shows current setup)")
end

-- Do the skinning of the mobs
function skinMobs()
	ColourNote(skinnerColor,"","[Skinner]: Skinning Mobs")
	for i=1,numcorpse,1 do
		SendNoEcho("skin " .. skintype)
		data.totalskins = data.totalskins + 1
		
		-- Check for auto-preserve all
		if preserve == "yes" then
			ColourNote(skinnerColor,"","[Skinner]: Auto-preserving skin...")
			SendNoEcho("preserve " .. skintype)
		end
	end
	if skinnerSmote then
		Send("smote @x204T@x211his@x217 @x218room @x224h@x255as@x231 be@x218e@x204n @x211ski@x217n@x218ned by @C" .. skinnerPlayer .. ".@w")
	end
end

-- Skinning done, drop if we don't want them
function skinningDone()
	if throwAway == "yes" then
		wait.make (function()
			wait.time(skinnerDropWait)
			SendNoEcho("drop " .. skintype)
		end)
	end
end

-- Set the type of skin
function changeType(name,line,args)
	skintype = args.type
	ColourNote(skinnerColor,"","[Skinner]: Type changed to " .. skintype)
	SetVariable("ks_skintype",skintype)
end

-- Set auto-preserve
function autoPreserve(name,line,args)
	preserve = string.lower(args.type)
	ColourNote(skinnerColor,"","[Skinner]: Auto-Preserve changed to " .. preserve)
	SetVariable("ks_preserve",preserve)
end

-- Set auto-drop
function autoDrop(name,line,args)
	throwAway = string.lower(args.type)
	ColourNote(skinnerColor,"","[Skinner]: Auto-Drop changed to " .. throwAway)
	SetVariable("ks_throwaway",throwAway)
end

-- Set auto-bag
function autoBag(name,line,args)
	autobagger = string.lower(args.type)
	ColourNote(skinnerColor,"","[Skinner]: Auto-Bag changed to " .. autobagger)
	SetVariable("ks_autobag",autobagger)
end

-- Set bagname
function setBag(name,line,args)
	thebag = string.lower(args.type)
	ColourNote(skinnerColor,"","[Skinner]: Storage Bag changed to " .. thebag)
	SetVariable("ks_bag", thebag)
end

-- Turn skinner on
function enableSkinner()
	enabled = "yes"
	ColourNote(skinnerColor,"","[Skinner]: Skinner enabled")
	SetVariable("ks_enabled",enabled)
end	

-- Turn skinner off
function disableSkinner()
	enabled = "no"
	ColourNote(skinnerColor,"","[Skinner]: Skinner disabled")
	SetVariable("ks_enabled",enabled)
end

-- Show skinner status
function showStatus()
	ColourNote(skinnerColor,"","[Skinner]: Enabled - " .. enabled)
	ColourNote(skinnerColor,"","[Skinner]: Type - " .. skintype)
	ColourNote(skinnerColor,"","[Skinner]: Auto-Preserve - " .. preserve)
	ColourNote(skinnerColor,"","[Skinner]: Auto-Drop - " .. throwAway)
	ColourNote(skinnerColor,"","[Skinner]: Auto-Bag - " .. autobagger)
	ColourNote(skinnerColor,"","[Skinner]: Storage Bag - " .. thebag)
end

-- We got bloot!  Let's do things!
function addBloot(name, line, args)	
    local iType = ""
    if args.bloot == nil or args.bloot == "" then
		iType = "Normal"
    else
        iType = args.bloot
    end
    iType = string.gsub(iType, "%(", "") --In case of Godly, it has 2 (
    iType = string.gsub(iType, "%)", "") --In case of Godly, it has 2 )

    if data.loot[iType] == nil then
        data.loot[iType] = 0
    end

    data.loot[iType] = tonumber(data.loot[iType]) + 1
    if iType ~= "Normal" then
		message = "You crafted some bloot!  Type: " .. iType
		ColourNote(skinnerColor,"","[Skinner]:" .. message)
		CallPlugin("b555825a4a5700c35fa80780","storeFromOutside","@x033[Skinner]: @x123" .. message, 1, true, true)
		Send("keep ".. iType)
		-- You craft the cloak further into: (Vibrant) a protective cloak skinned from a guard dog.
		if preserve == "bloot" then
			ColourNote(skinnerColor,"","[Skinner]: Auto-preserving skin...")
			Send("preserve " .. iType)
		end
		if autobagger == "yes" then
			if thebag == nil or thebag == "" then
				ColourNote(skinnerColor,"","[Skinner]: You need to set your bag!")
			else
				Send("put " .. iType .. " " .. thebag)
			end
		end
        data.lastBonus = data.totalskins
    end
    SetVariable("ks_data", serialize.save_simple(data)) --Save updated info
end

-- Report skinning data
-- todo: toggle for commas on/off?
function reportData(name, line, wildcards)
    local tStr = wildcards.channel .. " " .. tag .. " "
	local totalBloot = 0
	local blootReport = ""
	local sadReport = ""
    --tStr = tStr .. "@cTotal Skins: @w" .. data.totalskins .. "@c. "
	tStr = tStr .. "@cTotal Skins: @w" .. commas(data.totalskins) .. "@c. "
    if (data.totalskins - data.lastBonus) == 1 then
        --tStr = tStr .. "@cLast bonus: @w" .. (data.totalskins - data.lastBonus) .. " skin ago@c. "
		tStr = tStr .. "@cLast bonus: @w" .. (commas(data.totalskins - data.lastBonus)) .. " skin ago@c. "
    else
        --tStr = tStr .. "@cLast bonus: @w" .. (data.totalskins - data.lastBonus) .. " skins ago@c. "
		tStr = tStr .. "@cLast bonus: @w" .. (commas(data.totalskins - data.lastBonus)) .. " skins ago@c. "
    end
    tStr = tStr .. "@cLoot: @D[@W"
    local tCount = 0

	for k, v in spairs(data.loot, function(t,a,b) return t[a] > t[b] end) do
		if tCount == 0 then
			--tStr = tStr .. k .. "@c: @G" .. v .. "@c(@C" .. string.format("%.2f%%", (v/data.totalskins)*100) .. "@c)@W"
			blootReport = blootReport .. k .. "@c: @G" .. commas(v) .. "@c(@C" .. string.format("%.4f%%", (v/data.totalskins)*100) .. "@c)@W"
			tCount = tCount + 1
		else
			--tStr = tStr .. " " .. k .. "@c: @G" .. v .. "@c(@C" .. string.format("%.2f%%", (v/data.totalskins)*100) .. "@c)@W"
			blootReport = blootReport .. " " .. k .. "@c: @G" .. commas(v) .. "@c(@C" .. string.format("%.4f%%", (v/data.totalskins)*100) .. "@c)@W"
		end
		totalBloot = totalBloot + v
	end
	blootReport = blootReport .. "@D]@w"

	sadReport = "@WNormal: @G" .. commas(data.totalskins-totalBloot) .. "@c(@C" .. string.format("%.4f%%", ((data.totalskins-totalBloot)/data.totalskins)*100) .. "@c) @W"
	Send(tStr .. sadReport .. blootReport)
end

-- Reset skinning data
function resetData()
	ColourNote(skinnerColor,"","[Skinner]: Resetting Data")
	data = { totalskins = 0, lastBonus = 0, loot = {} }
	SetVariable("data", serialize.save_simple(data))
end

-- Helper function
function spairs(t, order)
  -- collect the keys
  local keys = {}
  for k in pairs(t) do keys[#keys+1] = k end

  -- if order function given, sort by it by passing the table and keys a, b,
  -- otherwise just sort the keys 
  if order then
	 table.sort(keys, function(a,b) return order(t, a, b) end)
  else
	 table.sort(keys)
  end

  -- return the iterator function
  local i = 0
  return function()
	 i = i + 1
	 if keys[i] then
		return keys[i], t[keys[i]]
	 end
  end
end

function checkItems()
	-- Gotta set the score
	compareSet()
	
	wait.make (function()
		SendNoEcho("echo {kelinv}")
		SendNoEcho("inv")
		SendNoEcho("echo {/kelinv}")
		wait.time(1)
	end)
end

--function checkitem(name,line,args)
--	ColourNote("Green","",string.sub(line,9))
--	itemlist.index = 
--end

-- Set up compare
function compareSet()
	-- Setting all stats to a score of "2" and HR/DR to a score of "1"
	SendNoEcho("compare set str 2")
	SendNoEcho("compare set con 2")
	SendNoEcho("compare set dex 2")
	SendNoEcho("compare set int 2")
	SendNoEcho("compare set wis 2")
	SendNoEcho("compare set lck 2")
	SendNoEcho("compare set hr 2")
	SendNoEcho("compare set dr 2")
end

]]>

</script>

</muclient>
